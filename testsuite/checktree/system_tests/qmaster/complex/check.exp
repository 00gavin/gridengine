#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"


# define a level initialization procedure:
set check_init_level_procedure "complex_init_level"

# define test's name and run level descriptions
set check_name            "complex"
set check_category        "COMPATIBILITY SYSTEM L10N"
set check_highest_level   0
set check_description(0)  "Test host type complex with loadsensor and complex host"

# define test's dependencies
set check_needs           "init_core_system" 


# define test's procedure order
set check_functions ""
lappend check_functions "complex_setup"
lappend check_functions "complex_loadsensor_test"
lappend check_functions "complex_hosttype_long_short_test"
lappend check_functions "complex_cleanup"

global complex_old_config
global complex_old_queue_config


proc complex_init_level {} {
   global CHECK_ACT_LEVEL
   global CHECK_PRODUCT_TYPE
   global test_array_jobs 

  switch -- $CHECK_ACT_LEVEL {
     "0" { 
           return 0    
     } 
     "1" {
           return -1
     }
  } 
  return -1  ;# no other level else
}

# -------- local test procedures -----------------------------------------------


proc complex_setup  {} {
   global CHECK_OUTPUT complex_old_config
   global complex_old_queue_config
   global CHECK_PRODUCT_TYPE
   global CHECK_CORE_EXECD
   global CHECK_ARCH CHECK_TESTSUITE_ROOT
   global CHECK_PRODUCT_ROOT CHECK_SCRIPT_FILE_DIR
   global CHECK_DNS_DOMAINNAME CHECK_PROTOCOL_DIR

   set host [lindex $CHECK_CORE_EXECD 0]

   puts $CHECK_OUTPUT "saving configuration for host $host"
   get_config complex_old_config $host
   if { [info exists complex_old_config(load_sensor)] == 0 } {
      set complex_old_config(load_sensor) "" 
   }
   set fout [ open "$CHECK_PRODUCT_ROOT/testsuite_dns_domain" "w" ]
   puts $fout $CHECK_DNS_DOMAINNAME
   flush $fout
   close $fout

   set new_config(load_sensor) "$CHECK_TESTSUITE_ROOT/$CHECK_SCRIPT_FILE_DIR/loadsensor.sh"
   set_config new_config $host

   set queue_complex(test_time)     "tt    TIME   0:0:0      <=    YES    NO    0:0:0"
   set queue_complex(test_resolve)  "tr    HOST   unknown    ==    YES    NO    none"
   set_complex queue_complex "queue"

   set host_complex(test_hostname)  "th    HOST   unknown    ==    YES    NO    none"
   set host_complex(test_arch)      "ta    STRING none       ==    YES    NO    none"
   set host_complex(test_load)      "tl    DOUBLE 99.99      >=    NO     NO    0"
   set host_complex(test_memory)    "tm    MEMORY 0          <=    YES    NO    0"
   set host_complex(test_integer)   "ti    INT    0          <=    YES    YES   1" 
   set_complex host_complex "host"

   get_queue "$host.q" complex_old_queue_config
   set my_queue_config(complex_values) "test_time=5:5:5,test_resolve=${host}.${CHECK_DNS_DOMAINNAME}"
   set_queue  "$host.q" my_queue_config

   set_error 0 "ok"
}



proc complex_loadsensor_test {} {
   global CHECK_CORE_EXECD 
   global CHECK_OUTPUT CHECK_ARCH
   global CHECK_SCRIPT_FILE_DIR CHECK_PRODUCT_ROOT
   global CHECK_TESTSUITE_ROOT CHECK_CORE_MASTER CHECK_USER

   set host [lindex $CHECK_CORE_EXECD 0]

   puts $CHECK_OUTPUT "shutdown execd on host $host"
   set result [ start_remote_prog "$CHECK_CORE_MASTER" "$CHECK_USER" "$CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qconf" "-ke $host" ]

   puts $CHECK_OUTPUT "qconf -ke $host returned $prg_exit_state"
   if { $prg_exit_state != 0 } {
        shutdown_system_daemon $host execd
   }
   wait_for_unknown_load 180 "${host}.q"

   startup_execd $host
   wait_for_load_from_all_queues 180 

   get_qconf_se_info $host
   if { [string first "test_arch=TEST_ARCH" $qconf_se_info(load_values) ] < 0 } {
      add_proc_error "complex_loadsensor_test" "-1" "no test_arch load value reported"
   }
   if { [string first "test_hostname=" $qconf_se_info(load_values) ] < 0 } {
      add_proc_error "complex_loadsensor_test" "-1" "no test_hostname load value reported"
   }
   if { [string first "test_load=55.55" $qconf_se_info(load_values) ] < 0 } {
      add_proc_error "complex_loadsensor_test" "-1" "no test_load load value reported"
   }
   if { [string first "test_memory=123321" $qconf_se_info(load_values) ] < 0 } {
      add_proc_error "complex_loadsensor_test" "-1" "no test_memory load value reported"
   }
   if { [string first "test_integer=123456" $qconf_se_info(load_values) ] < 0 } {
      add_proc_error "complex_loadsensor_test" "-1" "no test_integer load value reported"
   }

   set jobargs "-o /dev/null -e /dev/null $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh" 
   set job_ids ""
   lappend job_ids [submit_job "-l test_arch=TEST_ARCH $jobargs 30"]
   lappend job_ids [submit_job "-l test_hostname=$host $jobargs 35"]
   set not_requestable_job [submit_job "-l test_load=55.55 $jobargs 60" 0 ]
   if { $not_requestable_job != -10 } {
       add_proc_error "complex_loadsensor_test" -1 "resource test_load should not be requestable"
   }  
   lappend job_ids [submit_job "-l test_memory=123321 $jobargs 40"]
   lappend job_ids [submit_job "-l test_integer=123456 $jobargs 45"]
   lappend job_ids [submit_job "-l test_time=5:5:5 $jobargs 50"] 
 
   foreach elem $job_ids {
      if { $elem >= 0 } {  
         wait_for_jobstart $elem "leeper" 60
      }
   }
   foreach elem $job_ids {
      if { $elem >= 0 } {  
         wait_for_jobend $elem "leeper" 60
      }
   }

   set_error 0 "ok"
}


proc complex_hosttype_long_short_test {} {
   global CHECK_CORE_EXECD 
   global CHECK_OUTPUT CHECK_ARCH
   global CHECK_SCRIPT_FILE_DIR CHECK_PRODUCT_ROOT
   global CHECK_TESTSUITE_ROOT CHECK_CORE_MASTER CHECK_USER

   set host [lindex $CHECK_CORE_EXECD 0]

   set jobargs "-o /dev/null -e /dev/null $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh" 
   set job_id [submit_job "-l test_resolve=$host $jobargs 30"]

   set job_start_ret [ wait_for_jobstart $job_id "leeper" 60 ]
   if { $job_start_ret != 0 } {
      add_proc_error "complex_hosttype_long_short_test" -1 "host resolving problem in complexes"
   } else {
      wait_for_jobend $job_id "leeper" 100
   }

   set_error 0 "ok"
   
}

proc complex_cleanup  {} {
   global CHECK_OUTPUT complex_old_config
   global complex_old_queue_config
   global CHECK_PRODUCT_TYPE 
   global CHECK_CORE_EXECD 
   global CHECK_ARCH CHECK_HOST CHECK_USER
   global CHECK_PRODUCT_ROOT CHECK_CORE_MASTER


   puts $CHECK_OUTPUT "do qdel -uall"
   catch {  eval exec "$CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qdel" "-uall" } catch_result
   puts $CHECK_OUTPUT $catch_result

   set host [lindex $CHECK_CORE_EXECD 0]
   puts $CHECK_OUTPUT "resetting configuration for host $host"
   set_config complex_old_config $host

   puts $CHECK_OUTPUT "shutdown execd on host $host"
   set result [ start_remote_prog "$CHECK_CORE_MASTER" "$CHECK_USER" "$CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qconf" "-ke $host" ]

   puts $CHECK_OUTPUT "qconf -ke $host returned $prg_exit_state"
   if { $prg_exit_state != 0 } {
        shutdown_system_daemon $host execd
   }
   wait_for_unknown_load 180 "${host}.q"

   startup_execd $host
   wait_for_load_from_all_queues 180

   set_queue "$host.q" complex_old_queue_config

   set queue_complex(test_time)     ""
   set queue_complex(test_resolve)  ""
   set_complex queue_complex "queue"

   set host_complex(test_hostname)  ""
   set host_complex(test_arch)      ""
   set host_complex(test_load)      ""
   set host_complex(test_memory)    ""
   set host_complex(test_integer)   "" 
   set_complex host_complex "host"

   delete_file "$CHECK_PRODUCT_ROOT/testsuite_dns_domain"

   set_error 0 "ok"
}



