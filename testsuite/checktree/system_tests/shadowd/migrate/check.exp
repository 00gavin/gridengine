#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "init_level"


# define test's name and run level descriptions
set check_name            "shadowd"
set check_highest_level   0
set check_description(0)  "setting up shadowd on 2.nd execd, restart system, kill master, wait for new master, reset system"

# define test's dependencies
set check_needs           "init_core_system" 


# define test's procedure order
set check_functions ""
lappend check_functions "shadowd_setup"
lappend check_functions "shadowd_kill_all_shadowd"
lappend check_functions "shadowd_startup"
lappend check_functions "shadowd_kill_master_and_sheduler"
lappend check_functions "shadowd_wait_for_startup"
lappend check_functions "shadowd_kill_shadowd_master_and_shadowd_sheduler"
lappend check_functions "shadowd_cleanup"

# check's globals
global shadowd_hostname
global shadowd_file 
global shadowd_pid
global shadowd_master_spool_dir
global shadowd_original_master_spool_dir
global shadowd_moved_master_dir
set shadowd_hostname ""
set shadowd_pid -1
set shadowd_file "shadow_masters"
set shadowd_master_spool_dir "undefined"
set shadowd_original_master_spool_dir "undefined"
set shadowd_moved_master_dir 0

# run level initialization
#                                                             max. column:     |
#****** migrate/init_level() ******
# 
#  NAME
#     init_level -- ??? 
#
#  SYNOPSIS
#     init_level { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc init_level {} {
  global CHECK_ACT_LEVEL CHECK_HOST hold_state pending_state

  switch -- $CHECK_ACT_LEVEL {
     "0" {  return 0   } 
  } 
  return -1  ;# no other level else
}

# -------- local test procedures -----------------------------------------------

#                                                             max. column:     |
#****** migrate/shadowd_setup() ******
# 
#  NAME
#     shadowd_setup -- ??? 
#
#  SYNOPSIS
#     shadowd_setup { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc shadowd_setup {} {
   global CHECK_CORE_EXECD CHECK_OUTPUT CHECK_PRODUCT_ROOT 
   global shadowd_file shadowd_hostname shadowd_master_spool_dir
   global shadowd_original_master_spool_dir shadowd_moved_master_dir

   if { [ llength $CHECK_CORE_EXECD ] < 2 } {
      add_proc_error "shadowd_setup" "-3" "Need at least 2 execution hosts"
      set_error 0 "ok"
      return 
   }

   set ok 0
   set qmaster_hosts [ get_hosts ]
   for {set i 1} { $i < [ llength $CHECK_CORE_EXECD ] } { incr i 1 } {
      set shadowd_host [lindex $CHECK_CORE_EXECD $i]
      set shadowd_hostname [ resolve_host $shadowd_host 1 ]
      set ok 0
      foreach elem $qmaster_hosts {
         if { [ string compare $elem $shadowd_hostname ] == 0 } {
            set ok 1 
            break;
         }
      }
      if { $ok == 1 } {
          break;
      }
   }

   if { $ok != 1 } {
      set_error "-3" "no suiteable shadowd host found in cluster configuration, perhaps wrong host name resolving"
      return
   }

   puts $CHECK_OUTPUT "using execd host \"${shadowd_hostname}\" as shadowd host"


   set default_spool_dir "$CHECK_PRODUCT_ROOT/default/spool/qmaster"
   set shadowd_master_spool_dir [ get_qmaster_spool_dir ]  

   if { [string compare $default_spool_dir $shadowd_master_spool_dir] != 0 } {
       puts $CHECK_OUTPUT "setting qmaster spool dir to $default_spool_dir"
       set shadowd_original_master_spool_dir $shadowd_master_spool_dir
       move_qmaster_spool_dir $default_spool_dir
       set shadowd_moved_master_dir 1
       set shadowd_master_spool_dir [ get_qmaster_spool_dir ]  
   }
 
  
   puts $CHECK_OUTPUT ""
   puts $CHECK_OUTPUT "creating file \"$CHECK_PRODUCT_ROOT/default/common/$shadowd_file\" ..." 
   set file_p [ open "$CHECK_PRODUCT_ROOT/default/common/$shadowd_file" "w" ]
   puts $file_p $shadowd_hostname
   close $file_p   
  
   set_error 0 "ok"
}

#                                                             max. column:     |
#****** migrate/shadowd_startup() ******
# 
#  NAME
#     shadowd_startup -- ??? 
#
#  SYNOPSIS
#     shadowd_startup { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc shadowd_startup {} {

   global CHECK_OUTPUT shadowd_hostname CHECK_PRODUCT_ROOT
   global shadowd_pid CHECK_CORE_EXECD
  
   if { [ llength $CHECK_CORE_EXECD ] < 2 } {
      add_proc_error "shadowd_setup" "-3" "Need at least 2 execution hosts"
      set_error 0 "ok"
      return 
   }

 
   puts $CHECK_OUTPUT ""
   puts $CHECK_OUTPUT "starting up shadowd daemon ..."
   startup_shadowd $shadowd_hostname
  
   set mytimeout [ expr ( [timestamp] + 30 ) ]
   while { [timestamp] < $mytimeout } { 
      set index_list [ ps_grep "$CHECK_PRODUCT_ROOT" "$shadowd_hostname" ]
      set new_index ""
      puts $CHECK_OUTPUT "looking for shadowd daemon process ..."
      foreach elem $index_list {
         puts $CHECK_OUTPUT $ps_info(string,$elem)
         if { [ string first "shadowd" $ps_info(string,$elem) ] >= 0 } {
            lappend new_index $elem
            puts $CHECK_OUTPUT "found shadowd!"
         }
      }
      if { [llength $new_index] != 0 } {
         break;
      }
   } 
   
   if { [llength $new_index] == 1 }  {
      set shadowd_index [ lindex $new_index 0 ]
      set shadowd_pid $ps_info(pid,$shadowd_index)
      puts $CHECK_OUTPUT "found running shadowd with pid $shadowd_pid"
   } 
   if { [llength $new_index] == 0 } {
      add_proc_error "shadowd_startup" "-1" "shadowd is not running on host $shadowd_hostname"
   } 
   if { [llength $new_index] > 1 } {
      add_proc_error "shadowd_startup" "-1" "more than one shadowd processes are running on host $shadowd_hostname (started with path \"$CHECK_PRODUCT_ROOT\")"
   }
   set_error 0 "ok"
}

#                                                             max. column:     |
#****** migrate/shadowd_kill_all_shadowd() ******
# 
#  NAME
#     shadowd_kill_all_shadowd -- ??? 
#
#  SYNOPSIS
#     shadowd_kill_all_shadowd { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc shadowd_kill_all_shadowd {} {
   global shadowd_hostname CHECK_CORE_EXECD

   if { [ llength $CHECK_CORE_EXECD ] < 2 } {
      add_proc_error "shadowd_setup" "-3" "Need at least 2 execution hosts"
      set_error 0 "ok"
      return 
   }


   set nr [ shutdown_all_shadowd $shadowd_hostname ]
   set nr [ shutdown_all_shadowd $shadowd_hostname ]
   
   if { $nr != 0 } {
      add_proc_error "shadowd_kill_all_shadowd" "-1" "there are still $nr shadowd daemons running on host $shadowd_hostname"
   }
   set_error 0 "ok"
}

#                                                             max. column:     |
#****** migrate/shadowd_kill_master_and_sheduler() ******
# 
#  NAME
#     shadowd_kill_master_and_sheduler -- ??? 
#
#  SYNOPSIS
#     shadowd_kill_master_and_sheduler { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc shadowd_kill_master_and_sheduler {} {
   global CHECK_CORE_MASTER shadowd_master_spool_dir CHECK_CORE_EXECD

   if { [ llength $CHECK_CORE_EXECD ] < 2 } {
      add_proc_error "shadowd_setup" "-3" "Need at least 2 execution hosts"
      set_error 0 "ok"
      return 
   }


   shutdown_master_and_scheduler $CHECK_CORE_MASTER $shadowd_master_spool_dir
   set_error 0 "ok"
}

#                                                             max. column:     |
#****** migrate/shadowd_wait_for_startup() ******
# 
#  NAME
#     shadowd_wait_for_startup -- ??? 
#
#  SYNOPSIS
#     shadowd_wait_for_startup { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc shadowd_wait_for_startup {} {
   global CHECK_OUTPUT CHECK_PRODUCT_ROOT shadowd_hostname CHECK_CORE_MASTER
   global CHECK_USER CHECK_TCL_SCRIPTFILE_DIR shadowd_master_spool_dir CHECK_CORE_EXECD

   if { [ llength $CHECK_CORE_EXECD ] < 2 } {
      add_proc_error "shadowd_setup" "-3" "Need at least 2 execution hosts"
      set_error 0 "ok"
      return 
   }


   puts $CHECK_OUTPUT ""
   puts $CHECK_OUTPUT "removing qmasters lock ..."


   start_remote_tcl_prog $CHECK_CORE_MASTER $CHECK_USER "file_procedures.tcl" "delete_file" "$shadowd_master_spool_dir/lock"
 
  
   set time [timestamp]
   while { 1 } {
      puts $CHECK_OUTPUT "waiting for startup of qmaster and scheduler ..."
      set running [ are_master_and_scheduler_running $shadowd_hostname $shadowd_master_spool_dir]
      if { $running == 3 } {
         break; 
      }

      set runtime [expr ( [timestamp] - $time) ]
      if { $runtime >= 600 } {
          add_proc_error "shadowd_wait_for_startup" -1 "timeout while waiting for startup of qmaster and scheduler"
          break;
      }
      sleep 30
   } 
   
   wait_for_load_from_all_queues 600

   set_error 0 "ok"
}

#                                                             max. column:     |
#****** migrate/shadowd_kill_shadowd_master_and_shadowd_sheduler() ******
# 
#  NAME
#     shadowd_kill_shadowd_master_and_shadowd_sheduler -- ??? 
#
#  SYNOPSIS
#     shadowd_kill_shadowd_master_and_shadowd_sheduler { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc shadowd_kill_shadowd_master_and_shadowd_sheduler {} {
   global shadowd_hostname shadowd_master_spool_dir CHECK_CORE_EXECD

   if { [ llength $CHECK_CORE_EXECD ] < 2 } {
      add_proc_error "shadowd_setup" "-3" "Need at least 2 execution hosts"
      set_error 0 "ok"
      return 
   }

   shutdown_master_and_scheduler $shadowd_hostname $shadowd_master_spool_dir
   set_error 0 "ok"
}

#                                                             max. column:     |
#****** migrate/shadowd_cleanup() ******
# 
#  NAME
#     shadowd_cleanup -- ??? 
#
#  SYNOPSIS
#     shadowd_cleanup { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc shadowd_cleanup {} {
   global CHECK_PRODUCT_ROOT CHECK_OUTPUT shadowd_file shadowd_pid 
   global shadowd_hostname CHECK_CORE_MASTER CHECK_USER CHECK_CORE_EXECD
   global shadowd_original_master_spool_dir shadowd_moved_master_dir

   if { [ llength $CHECK_CORE_EXECD ] < 2 } {
      add_proc_error "shadowd_setup" "-3" "Need at least 2 execution hosts"
      set_error 0 "ok"
      return 
   }


   if { $shadowd_pid > 0  } {
      set nr [ shutdown_all_shadowd $shadowd_hostname  ]
      set nr [ shutdown_all_shadowd $shadowd_hostname  ]
      if { $nr != 0 } {
         add_proc_error "shadowd_cleanup" "-1" "there are still $nr shadowd daemons running on host $shadowd_hostname"
      }
   }
 
   puts $CHECK_OUTPUT ""
   puts $CHECK_OUTPUT "delete file \"$CHECK_PRODUCT_ROOT/default/common/$shadowd_file\" ..." 
   delete_file "$CHECK_PRODUCT_ROOT/default/common/$shadowd_file" 


   puts $CHECK_OUTPUT ""
   puts $CHECK_OUTPUT "setting act_qmaster to $CHECK_CORE_MASTER ..."
   set file_p [ open "$CHECK_PRODUCT_ROOT/default/common/act_qmaster" "w" ]
   puts $file_p $CHECK_CORE_MASTER
   close $file_p   

   puts $CHECK_OUTPUT ""
   puts $CHECK_OUTPUT "starting up qmaster and scheduler on host $CHECK_CORE_MASTER ..."
   startup_qmaster 
   wait_for_load_from_all_queues 600 


   if { $shadowd_moved_master_dir == 1 } {
      puts $CHECK_OUTPUT "restoring old qmaster spool directory"
      move_qmaster_spool_dir $shadowd_original_master_spool_dir
   }

   set_error 0 "ok"
}

# ------------------------------------------
























