#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

# set check_root_access_needs "yes"


# define a level initialization procedure:
set check_init_level_procedure "init_level"

# define test's name and run level descriptions
set check_name            "file_parsing"
set check_category        "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_highest_level   0
set check_description(0)  "Testing global, home and pwd request def. file, script and command line options"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_cleanup_function "file_parsing_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "file_parsing_N_option"
lappend check_functions "file_parsing_long_option"

global file_parsing_request_test
global file_parsing_cluster_request_file
global file_parsing_home_request_file
global file_parsing_local_request_file

proc init_level {} {
   global ts_config
  global CHECK_ACT_LEVEL
  global CHECK_PRODUCT_ROOT
  global env
  global CHECK_JOB_OUTPUT_DIR
  global file_parsing_single_test
  global file_parsing_cluster_request_file 
  global file_parsing_home_request_file
  global file_parsing_local_request_file
  global file_parsing_job_script

 
  set file_parsing_cluster_request_file "$CHECK_PRODUCT_ROOT/$ts_config(cell)/common/sge_request"
  set file_parsing_home_request_file    "$env(HOME)/.sge_request"
  set file_parsing_local_request_file   "$CHECK_JOB_OUTPUT_DIR/.sge_request"
  set file_parsing_job_script           "$CHECK_JOB_OUTPUT_DIR/request_job.sh"

  switch -- $CHECK_ACT_LEVEL {
     "0" { set file_parsing_single_test 1 ; return 0    } 
     "1" { set file_parsing_single_test 2 ; return -1   }
  } 
  return -1  ;# no other level else
}

# -------- local test procedures -----------------------------------------------



proc create_job_script { option } {
   global CHECK_OUTPUT
   global file_parsing_job_script

   file delete $file_parsing_job_script
   set fp [ open $file_parsing_job_script "w" ]
   puts $fp "#!/bin/sh"
   puts $fp "#$ $option"
   puts $fp "sleep 15"
   flush $fp
   close $fp
} 

proc prepare_file_and_start_job { request_file_name option_parameter job_script { start_directory "" }} {

   global file_parsing_cluster_request_file
   global file_parsing_home_request_file
   global file_parsing_local_request_file
   global CHECK_OUTPUT

   puts $CHECK_OUTPUT "creating file $request_file_name"
   set fp [ open $request_file_name "w"]

   puts $CHECK_OUTPUT "option paramter is\n$option_parameter"
   puts $fp "$option_parameter -e /dev/null -o /dev/null"
   flush $fp
   close $fp


   puts $CHECK_OUTPUT "request file: $request_file_name"
   puts $CHECK_OUTPUT "submitting job $job_script from directory $start_directory"
   set return_value [ submit_job $job_script 0 30 "" "" $start_directory ]
   puts $CHECK_OUTPUT "return value of submit_job: $return_value"
   return $return_value
}

proc file_parsing_N_option {} {
   global CHECK_OUTPUT
   global CHECK_TESTSUITE_ROOT
   global file_parsing_single_test
   global file_parsing_cluster_request_file
   global file_parsing_home_request_file
   global file_parsing_local_request_file
   global file_parsing_job_script

   set accouting_jobs ""

    puts $CHECK_OUTPUT "Testing overwrite options ..."

    file delete $file_parsing_cluster_request_file
    file delete $file_parsing_home_request_file
    file delete $file_parsing_local_request_file

    create_job_script ""
    
    puts $CHECK_OUTPUT "global sge_request file"
    set option_parameter "-N GLOBAL"
    set back [ prepare_file_and_start_job $file_parsing_cluster_request_file $option_parameter $file_parsing_job_script]
    if { $back < 0 } {
        add_proc_error file_parsing_N_option "-1" "Could not start job with $option_parameter parameter"      
    }       
    wait_for_jobstart $back "GLOBAL" 30 1 1
    lappend accouting_jobs $back


    puts $CHECK_OUTPUT "home directory .sge_request file"
    set option_parameter "-N HOME"
    set back [ prepare_file_and_start_job $file_parsing_home_request_file $option_parameter $file_parsing_job_script]
    if { $back < 0 } {
        add_proc_error file_parsing_N_option "-1" "Could not start job with $option_parameter parameter"      
    }       
    wait_for_jobstart $back "HOME" 30 1 1
 
    lappend accouting_jobs $back


    puts $CHECK_OUTPUT "local directory .sge_request file"
    set option_parameter "-N LOCAL"
    set back [ prepare_file_and_start_job $file_parsing_local_request_file $option_parameter $file_parsing_job_script [file dirname $file_parsing_local_request_file ]]
    if { $back < 0 } {
        add_proc_error file_parsing_N_option "-1" "Could not start job with $option_parameter parameter"      
    }       
    wait_for_jobstart $back "LOCAL" 30 1 1
    lappend accouting_jobs $back

    puts $CHECK_OUTPUT "script options"
    set option_parameter "-N SCRIPT"
    create_job_script "$option_parameter"
    set back [ submit_job $file_parsing_job_script ]
    if { $back < 0 } {
        add_proc_error file_parsing_N_option "-1" "Could not start job with $option_parameter parameter"      
    }       
    wait_for_jobstart $back "SCRIPT" 30 1 1

    lappend accouting_jobs $back


    puts $CHECK_OUTPUT "command_line"
    set option_parameter "-N COMLINE"
    create_job_script ""
    set back [ submit_job "$option_parameter $file_parsing_job_script" ]
    if { $back < 0 } {
        add_proc_error file_parsing_N_option "-1" "Could not start job with $option_parameter parameter"      
    }
    wait_for_jobstart $back "COMLINE" 30 1 1

    lappend accouting_jobs $back


   file delete $file_parsing_cluster_request_file
   file delete $file_parsing_home_request_file
   file delete $file_parsing_local_request_file

   
   wait_for_end_of_all_jobs 60

   foreach elem $accouting_jobs {
      set timeout_time [timestamp]
      incr timeout_time 120
      while { 1 } {
         sleep 1
         puts $CHECK_OUTPUT "try to get accounting info for job $elem ..."
         set result [get_qacct $elem]
         puts $CHECK_OUTPUT "result: $result"
         if { $result != 1 } {
            if { [timestamp] < $timeout_time } {
               continue
            } else {
               break
            }
         } else {
            break
         }
      } 
      if { $result != 1 } {
         add_proc_error "file_parsing_N_option" "-1" "No accounting information for job $elem available" 
      } else {
         set names [array names qacct_info]
         foreach name $names {
            puts $CHECK_OUTPUT "$name: $qacct_info($name)"
         }
      }
   }


#
#  command-line overwrites sge_definition file
#  command-line overwrites embedded script options
#  emmbedded script overwrites sge_definition file
#
   set_error 0 "ok"
}

proc file_parsing_long_option_verify {back long case} {
   global ts_config

   # in SGE 5.3 options longer than 4300 bytes made qsub fail
   if { $ts_config(gridengine_version) == 53 && $long && $back > 0 } {
      add_proc_error "file_parsing_long_option_verify" -1 "The job should not run ($case)"  
   } else {
      if { $back < 0 } {
         add_proc_error "file_parsing_long_option_verify" "-1" "Could not start job ($case)"      
      }  
   }
}

proc file_parsing_long_option {} {
   global ts_config
   global CHECK_OUTPUT
   global CHECK_TESTSUITE_ROOT
   global file_parsing_single_test
   global file_parsing_cluster_request_file
   global file_parsing_home_request_file
   global file_parsing_local_request_file
   global file_parsing_job_script

   set accouting_jobs ""

    puts $CHECK_OUTPUT "Testing overwrite options ..."

    file delete $file_parsing_cluster_request_file
    file delete $file_parsing_home_request_file
    file delete $file_parsing_local_request_file

    create_job_script ""
  
    puts $CHECK_OUTPUT "creating lines with more than 4300 chars"
 
    set option_parameter "-N "
    for {set i 3} {$i < 4300 } { incr i 1 } {
       append option_parameter "_"
    }   
    incr i 5 
    append option_parameter "$i "

    puts $CHECK_OUTPUT "global sge_request file"
    set back [ prepare_file_and_start_job $file_parsing_cluster_request_file $option_parameter $file_parsing_job_script]
    file_parsing_long_option_verify $back 1 "global sge_request file"
    
    puts $CHECK_OUTPUT "home directory .sge_request file"
    set back [ prepare_file_and_start_job $file_parsing_home_request_file $option_parameter $file_parsing_job_script]
    file_parsing_long_option_verify $back 1 "home directory .sge_request file"

    puts $CHECK_OUTPUT "local directory .sge_request file"
    set back [ prepare_file_and_start_job $file_parsing_local_request_file $option_parameter $file_parsing_job_script [file dirname $file_parsing_local_request_file]]
    file_parsing_long_option_verify $back 1 "local directory .sge_request file"
    
    puts $CHECK_OUTPUT "script options"
    create_job_script "$option_parameter"
    set back [ submit_job $file_parsing_job_script 0]
    file_parsing_long_option_verify $back 1 "script options"

    puts $CHECK_OUTPUT "command_line"
    create_job_script ""
    set back [ submit_job "$option_parameter $file_parsing_job_script" 0 ]
    file_parsing_long_option_verify $back 1 "command_line"

    file delete $file_parsing_cluster_request_file
    file delete $file_parsing_home_request_file
    file delete $file_parsing_local_request_file

    create_job_script ""
  
    puts $CHECK_OUTPUT "creating lines with more than 2023 chars"
 
    set option_parameter ""
    for {set i 3} {$i < 2023 } { incr i 1 } {
       append option_parameter "_"
    }   
    incr i 12  ;# parameter length is 2035 char/byte
    append option_parameter "$i "
    set opt_parameter "-N GLOBAL${option_parameter}"
    puts $CHECK_OUTPUT "global sge_request file"
    set back [ prepare_file_and_start_job $file_parsing_cluster_request_file $opt_parameter $file_parsing_job_script]
    file_parsing_long_option_verify $back 0 "global sge_request file"
    wait_for_jobstart $back "GLOBAL____" 30  1 1
    lappend accouting_jobs $back

    puts $CHECK_OUTPUT "home directory .sge_request file"
    set opt_parameter "-N HOME__${option_parameter}"
    set back [ prepare_file_and_start_job $file_parsing_home_request_file $opt_parameter $file_parsing_job_script]
    file_parsing_long_option_verify $back 0 "home directory .sge_request file"
    wait_for_jobstart $back "HOME______" 30 1 1
    lappend accouting_jobs $back

    puts $CHECK_OUTPUT "local directory .sge_request file"
    set opt_parameter "-N LOCAL_${option_parameter}"
    set back [ prepare_file_and_start_job $file_parsing_local_request_file $opt_parameter $file_parsing_job_script [file dirname $file_parsing_local_request_file]]
    file_parsing_long_option_verify $back 0 "local directory .sge_request file"
    wait_for_jobstart $back "LOCAL_____" 30 1 1
    lappend accouting_jobs $back

    puts $CHECK_OUTPUT "script options"
    set opt_parameter "-N SCRIPT${option_parameter}"
    create_job_script "$opt_parameter"
    set back [ submit_job $file_parsing_job_script ]
    file_parsing_long_option_verify $back 0 "script options"
    wait_for_jobstart $back "SCRIPT____" 30 1 1
    lappend accouting_jobs $back

    puts $CHECK_OUTPUT "command_line"
    set opt_parameter "-N COMLIN${option_parameter}"
    create_job_script ""
    set back [ submit_job "$opt_parameter $file_parsing_job_script" ]
    file_parsing_long_option_verify $back 0 "command_line"
    wait_for_jobstart $back "COMLIN____" 30 1 1
    lappend accouting_jobs $back

    file delete $file_parsing_cluster_request_file
    file delete $file_parsing_home_request_file
    file delete $file_parsing_local_request_file

    wait_for_end_of_all_jobs 60

    foreach elem $accouting_jobs {
      set timeout_time [timestamp]
      incr timeout_time 120
      while { 1 } {
         sleep 1
         puts $CHECK_OUTPUT "try to get accounting info for job $elem ..."
         set result [get_qacct $elem]
         puts $CHECK_OUTPUT "result: $result"
         if { $result != 1 } {
            if { [timestamp] < $timeout_time } {
               continue
            } else {
               break
            }
         } else {
            break
         }
      } 
      if { $result != 1 } {
         add_proc_error "file_parsing_long_option" "-1" "No accounting information for job $elem available" 
      } ;# else {
         # set names [array names qacct_info]
         # foreach name $names {
         #   puts $CHECK_OUTPUT "$name: $qacct_info($name)"
         # }
      # }
   }

#
#  command-line overwrites sge_definition file
#  command-line overwrites embedded script options
#  emmbedded script overwrites sge_definition file
#
   set_error 0 "ok"
}


proc file_parsing_cleanup {} {
   delete_all_jobs
   wait_for_end_of_all_jobs 60

   set_error 0 "ok"
}



