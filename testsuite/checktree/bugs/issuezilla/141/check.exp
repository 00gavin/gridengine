#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

# set check_root_access_needs "yes"


# define a level initialization procedure:
set check_init_level_procedure "issue_141_init_level"

# define test's name and run level descriptions
set check_name            "issue_141"
set check_category        "COMPATIBILITY SYSTEM"
set check_highest_level   0
set check_description(0)  "partly qdel of job with more tasks shouldn't delete all tasks"

# define test's dependencies
set check_needs           "init_core_system" 


# define test's procedure order
set check_functions ""
lappend check_functions "issue_141_setup"
lappend check_functions "issue_141_check"
lappend check_functions "issue_141_cleanup"

proc issue_141_init_level {} {
   global CHECK_ACT_LEVEL
   global CHECK_PRODUCT_TYPE
   global test_array_jobs 

  switch -- $CHECK_ACT_LEVEL {
     "0" { 
           return 0    
     } 
     "1" {
           return -1
     }
  } 
  return -1  ;# no other level else
}

# -------- local test procedures -----------------------------------------------

proc issue_141_setup  {} {
   global CHECK_OUTPUT 
   global CHECK_CORE_MASTER

   set_error 0 "ok"
}


proc issue_141_check {} {
   global CHECK_OUTPUT CHECK_PRODUCT_ROOT
  
   puts $CHECK_OUTPUT "Starting job ..."
   set arguments "-o /dev/null -e /dev/null -t 1-100"
   set job_id [ submit_job "$arguments $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 1000" ]

   puts $CHECK_OUTPUT "Waiting for start of job tasks ${job_id}.1-100 ..."
   wait_for_jobstart $job_id "Sleeper" 60 1 1
   

   puts $CHECK_OUTPUT "Delete job array $job_id.1-100:2"
   delete_job "${job_id}.1-100:2"

   set statelist [get_job_state $job_id 1 tasklist]
   set length [ llength $statelist ]
   incr length -1
   set taskcount 0
   for {set i 0} {$i < $length} {incr i 1} {
      set task  $tasklist($i,task)
      set state $tasklist($i,state)
      puts $CHECK_OUTPUT "examining task $task ..."
      set is_even [ expr ( $task % 2 ) ]
      if {$is_even == 0} {
         puts $CHECK_OUTPUT "task $task is even, must be running ..."
         puts $CHECK_OUTPUT "state is $state"
         incr taskcount 1
         if { [ string first "d" $state ] >= 0 } {
            add_proc_error "issue_141_check" -1 "task $task should be running"
         }
      } else {
         puts $CHECK_OUTPUT "task $task is not even, should be in delete state ..."
         puts $CHECK_OUTPUT "state is $state"

         if { [ string first "d" $state ] < 0 } {
            add_proc_error "issue_141_check" -1 "task $task should be in delete state"
         }
      }
   }
   if { $taskcount == 0 } {
      add_proc_error "issue_141_check" -1 "no even task is running"
   }

   puts $CHECK_OUTPUT "Delete job array $job_id.1-100:3"
   delete_job "${job_id}.1-100:3"


   puts $CHECK_OUTPUT "Delete job array $job_id.2-100:2"
   delete_job "${job_id}.2-100:2"

   set statelist [get_job_state $job_id 1 tasklist]
   set length [ llength $statelist ]
   incr length -1
   for {set i 0} {$i < $length} {incr i 1} {
      set task  $tasklist($i,task)
      set state $tasklist($i,state)
      puts $CHECK_OUTPUT "task $task should be in delete state ..."
      puts $CHECK_OUTPUT "state is $state"

      if { [ string first "d" $state ] < 0 } {
         add_proc_error "issue_141_check" -1 "task $task should be in delete state (2)"
      }
   }

   wait_for_jobend $job_id "Sleeper" 60

   set_error 0 "ok"
}

proc issue_141_cleanup  {} {
   global CHECK_OUTPUT CHECK_PRODUCT_ROOT CHECK_ARCH CHECK_CORE_MASTER

   puts $CHECK_OUTPUT "do qdel -uall"
   catch {  eval exec "$CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qdel" "-uall" } catch_result
   puts $CHECK_OUTPUT $catch_result
 
   wait_for_end_of_all_jobs 60 

   set_error 0 "ok"
}



