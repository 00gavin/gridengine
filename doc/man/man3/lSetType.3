'\" t
.\"___INFO__MARK_BEGIN__
.\"
.\" Copyright: 2001 by Sun Microsystems, Inc.
.\"
.\"___INFO__MARK_END__
.\"
.\" $RCSfile: lSetType.3,v $     Last Update: $Date: 2001/07/18 11:04:50 $     Revision: $Revision: 1.1 $
.\"
.\"
.\" Some handy macro definitions [from Tom Christensen's man(1) manual page].
.\"
.de SB      \" small and bold
.if !"\\$1"" \\s-2\\fB\&\\$1\\s0\\fR\\$2 \\$3 \\$4 \\$5
..
.\"
.de T    \" switch to typewriter font
.ft CW      \" probably want CW if you don't have TA font
..
.\"
.de TY      \" put $1 in typewriter font
.if t .T
.if n ``\c
\\$1\c
.if t .ft P
.if n \&''\c
\\$2
..
.\"
.de M    \" man page reference
\\fI\\$1\\fR\\|(\\$2)\\$3
..
.TH SET_FUNCS 3 "$Date: 2001/07/18 11:04:50 $" "xxRELxx" "xxQS_NAMExx List Library"
.\"
.SH NAME
lSet{Type}, lSetPos{Type} \- set the field content of type {Type}
.\"
.\"
.SH SYNOPSIS
.B #include """cull.h"""
.PP
.nf
.IP "\fBint lSetInt(\fP"
.RS
\fBlListElem *element,\fP
\fBint fieldname,\fP
\fBint value\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBint lSetUlong(\fP
.RS
\fBlListElem *element,\fP
\fBint fieldname,\fP
\fBlUlong value\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBint lSetString(\fP
.RS
\fBlListElem *element,\fP
\fBint fieldname,\fP
\fBlString value\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBint lSetList(\fP
.RS
\fBlListElem *element,\fP
\fBint fieldname,\fP
\fBlList* value\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBint lSetFloat(\fP
.RS
\fBlListElem *element,\fP
\fBint fieldname,\fP
\fBlFloat value\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBint lSetDouble(\fP
.RS
\fBlListElem *element,\fP
\fBint fieldname,\fP
\fBlDouble value\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBint lSetChar(\fP
.RS
\fBlListElem *element,\fP
\fBint fieldname,\fP
\fBlChar value\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBint lSetLong(\fP
.RS
\fBlListElem *element,\fP
\fBint fieldname,\fP
\fBlLong value\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBint lSetPosInt(\fP
.RS
\fBlListElem *element,\fP
\fBint position,\fP
\fBint value\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBint lSetPosUlong(\fP
.RS
\fBlListElem *element,\fP
\fBint position,\fP
\fBlUlong value\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBint lSetPosString(\fP
.RS
\fBlListElem *element,\fP
\fBint position,\fP
\fBlString value\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBint lSetPosList(\fP
.RS
\fBlListElem *element,\fP
\fBint position,\fP
\fBlList* value\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBint lSetPosFloat(\fP
.RS
\fBlListElem *element,\fP
\fBint position,\fP
\fBlFloat value\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBint lSetPosDouble(\fP
.RS
\fBlListElem *element,\fP
\fBint position,\fP
\fBlDouble value\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBint lSetPosChar(\fP
.RS
\fBlListElem *element,\fP
\fBint position,\fP
\fBlChar value\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBint lSetPosLong(\fP
.RS
\fBlListElem *element,\fP
\fBint position,\fP
\fBlLong value\fP
.RE
.fi
\fB);\fP
.PP
.\"
.\"
.SH DESCRIPTION
.IP "\fBint lSet{Type}(element, fieldname, value)\fP"
set the content of the field specified by \fBfieldname\fP
of list element \fBelement\fP.
The types of the field of list element \fBelement\fP and the type
of the delivered value must be equal.
.\"
.IP "\fBint lSetPos{Type}(element, position, value)\fP"
set the content of the field specified by \fBposition\fP 
of list element \fBelement\fP.
The types of the field of list element \fBelement\fP and the type
of the delivered value must be equal.
.\"
.\"
.SH "RETURN VALUES"
On error -1 is returned, 0 otherwise.
.\"
.SH ERRORS
The following possible values can occur for lerrno.
.IP "\fBLEELEMNULL\fP"
The element pointer specifying the element is NULL.
.\"
.IP "\fBLENEGPOS\fP"
The specified position for lSetPos{Type} is negative.
.\"
.IP "\fBLEINCTYPE\fP"
The specified types of the function and the field element are
incompatible.
.\"
.\"
.SH "SEE ALSO"
.PP
.M xxqs_name_sxx_intro 1 ,
.M list_intro 3 ,
.M lGetIn 3 .
.\"
.\"
.SH COPYRIGHT
See
.M xxqs_name_sxx_intro 1
for a full statement of rights and permissions.
