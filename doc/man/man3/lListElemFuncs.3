'\" t
.\"___INFO__MARK_BEGIN__
.\" 
.\" 
.\"  The Contents of this file are made available subject to the terms of
.\"  the Sun Industry Standards Source License Version 1.2
.\" 
.\"  Sun Microsystems Inc., March, 2001
.\" 
.\" 
.\"  Sun Industry Standards Source License Version 1.2
.\"  =================================================
.\"  The contents of this file are subject to the Sun Industry Standards
.\"  Source License Version 1.2 (the "License"); You may not use this file
.\"  except in compliance with the License. You may obtain a copy of the
.\"  License at http://www.gridengine.sunsource.net/license.html
.\" 
.\"  Software provided under this License is provided on an "AS IS" basis,
.\"  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
.\"  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
.\"  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
.\"  See the License for the specific provisions governing your rights and
.\"  obligations concerning the Software.
.\" 
.\"  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
.\" 
.\"  Copyright: 2001 by Sun Microsystems, Inc.
.\" 
.\"  All Rights Reserved.
.\" 
.\" 
.\"___INFO__MARK_END__
.\"
.\" $RCSfile: lListElemFuncs.3,v $     Last Update: $Date: 2001/07/19 15:55:26 $     Revision: $Revision: 1.2 $
.\"
.\"
.\" Some handy macro definitions [from Tom Christensen's man(1) manual page].
.\"
.de SB      \" small and bold
.if !"\\$1"" \\s-2\\fB\&\\$1\\s0\\fR\\$2 \\$3 \\$4 \\$5
..
.\"
.de T    \" switch to typewriter font
.ft CW      \" probably want CW if you don't have TA font
..
.\"
.de TY      \" put $1 in typewriter font
.if t .T
.if n ``\c
\\$1\c
.if t .ft P
.if n \&''\c
\\$2
..
.\"
.de M    \" man page reference
\\fI\\$1\\fR\\|(\\$2)\\$3
..
.TH ELEMENT_FUNCS 3 "$Date: 2001/07/19 15:55:26 $" "xxRELxx" "xxQS_NAMExx List Library"
.\"
.SH NAME
lCreateElem, lFreeElem, lCopyElem, lAppendElem, lInsertElem, lDechainElem, 
lFirst, lLast, lNext, lPrev, lFindFirst, lFindLast, lFindNext, lFindPrev, 
lDumpElem, lUndumpElem, lWriteElem, lWriteElemTo, lGetPosViaElem
.PP
generic list element manipulation and information functions
.\"
.\"
.SH SYNOPSIS
.B #include """cull.h"""
.PP
\fBlListElem* lCreateElem( lDescr *descriptor );\fP
.PP
.\"
\fBvoid lFreeElem( lListElem *element );\fP
.PP
.\"
\fBlListElem* lCopyElem( lListElem *source );\fP
.PP
.\"
\fBlListElem* lAppendElem( lList *list, lListElem *newelem );\fP
.PP
.\"
.nf
\fBlListElem* lDechainElem(\fP
.RS
\fBlList* list,\fP
\fBlListElem* element\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBlListElem* lFirst( lList* list );\fP
.PP
.\"
.nf
\fBlListElem* lLast( lList* list );\fP
.PP
.\"
.nf
\fBlListElem* lNext( lListElem* element );\fP
.PP
.\"
.nf
\fBlListElem* lPrev( lListElem* element );\fP
.PP
.\"
.nf
\fBlListElem* lFindFirst(\fP
.RS
\fBlList* list,\fP
\fBlCondition* condition\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBlListElem* lFindLast(\fP
.RS
\fBlList* list,\fP
\fBlCondition* condition\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBlListElem* lFindNext(\fP
.RS
\fBlListElem* element,\fP
\fBlCondition* element\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBlListElem* lFindPrev(\fP
.RS
\fBlListElem* element,\fP
\fBlCondition* element\fP
.RE
.fi
\fB);\fP
.PP
.\"
.nf
\fBint lDumpElem(\fP
.RS
\fBFILE *file,\fP
\fBlListElem *element,\fP
\fBint indent,\fP
\fBint number
.RE
.fi
\fB);\fP
.PP
.\"
\fBlListElem* lUndumpElem( FILE *file, lDescr *descriptor );\fP
.PP
.\"
\fBvoid lWriteElem( lListElem *element );\fP
.PP
.\"
\fBvoid lWriteElemTo( lListElem *element, FILE *fp );\fP
.PP
.\"
\fBint lGetPosViaElem( lListElem *element, int nm );\fP
.\"
.SH DESCRIPTION
.IP "\fBlCreateElem\fP"
creates a new list element specified by descriptor. In case of success,
a pointer to the list element is returned, otherwise the return value is
NULL. 
All list element fields are set to zero.
There is memory allocated for the list element, that must be released
with \fIlFreeElem\fP.
.\"
.IP "\fBlFreeElem\fP"
frees the memory allocated by \fIlCreateElem\fP. If there are sub-list or string
fields their memory is also released. 
If the list element is NULL the function simply returns.
.\"
.IP "\fBlCopyElem\fP"
duplicates a list element with all its sub-lists and strings. If an error occurs
NULL is returned, otherwise a pointer to the copied list element is returned.
If the copied list element is no longer used, the allocated memory has to be
released with \fIlFreeElem\fP.
.\"
.IP "\fBlAppendElem\fP"
append a list element to a generic list as the last element. The first argument
is the list to which the new element shall be appended. The second argument is
the new element. Sometimes it may be useful to use a copy of the element to be
inserted in the list (see \fIlCopyList\fP).
.\"
.IP "\fBlInsertElem\fP"
inserts a new element after the specified element in the list. The first 
argument is the list, the second argument is the list element, after which
the new element shall be inserted, and the third element is the new list 
element.
Sometimes it may be useful to use a copy of the element to be
inserted in the list (see \fIlCopyList\fP).
.\"
.IP "\fBlDechainElem\fP"
dechains the specified element from the generic list. A pointer to the
list element is returned. The list element is not destroyed. If it
shall be destroyed \fIlFreeElem\fP should be called.
.\"
.IP "\fBlFirst, lLast\fP"
get the first/last element of the specified list. If no list is 
specified or no elements are contained, NULL is returned.
Otherwise a pointer to the first/last list element is returned.
.\"
.IP "\fBlNext, lPrev\fP"
get the successor/predecessor of the specified element. 
If the specified element is NULL or the last/first element in the
list, NULL is returned. Otherwise a pointer to the successor/predecessor
is returned.
.\"
.IP "\fBlFindFirst, lFindLast\fP"
find the first/last element matching the specified condition. The first
argument is the generic list where the requested list element may be contained.
The second element is the condition that shall be fulfilled by the element. 
The list is searched in the order first/last to last/first element. 
If there is no element that matches the condition NULL is returned. If there
is no list specified, the return value is also NULL, otherwise a pointer to
the first/last matching list element is returned.
.\"
.IP "\fBlFindNext, lFindPrev\fP"
find the next/previous element matching the specified condition. 
The first argument is the list element returned by
.I lFindFirst/lFindLast
or \fIlFindNext/lFindPrev\fP. The second
argument is the condition which should be equal to the one stated in
the corresponding
.I lFindFirst/lFindLast
call. The return value is NULL, if the specified
list element is NULL or no matching element is found.
Otherwise a pointer to the matching list element is returned.
.\"
.IP "\fBlDumpElem\fP"
dumps a list element in ASCII format to a file. The first argument is 
a FILE pointer, the second argument is the list element to be dumped, 
the third argument is the number of indentation units for formatting 
purposes and the fourth argument is the number of the element.
This function is normally called by
.M lDumpList 3 .
.\"
.IP "\fBlUndumpElem\fP"
undumps a list element from a dump file. The first argument is a FILE pointer 
of the dump file. The second argument is the descriptor of the list element.
If one or both of the function arguments are NULL, NULL is retuned.
Otherwise a pointer to the newly created list element is returned.
If the element is no longer used,
.I lFreeElem
has to be called.
This function is normally called by
.M lUndumpList 3
only.
.\"
.IP "\fBlWriteElem\fP"
writes the contents of a list element with all its sub-lists if Monitoring
Level CULL_LAYER is set to info.
The only argument is a list element. 
.\"
.IP "\fBlWriteElemTo\fP"
writes the contents of a list element with all its sub-lists to the stream
connected with the file pointer fp.
The first argument is a list element, the second argument is a file pointer
or NULL. If the file pointer is NULL, this function behaves exactly as 
lWriteElemTo.
.\"
.IP "\fBlGetPosViaElem\fP"
get the field position of a field with name \fBnm\fP in the list element
\fBelement\fP.
The position of the field named \fBnm\fP is returned. If the field does not 
exist in the list element -1 is returned.
.\"
.\"
.SH "RETURN VALUES"
In case of error the return value is -1 or NULL, otherwise 0 or a valid 
pointer to the corresponding struct is returned.
.\"
.\"
.SH ERRORS
The following errors may occur. The affected functions are listed in 
parentheses.
.IP "\fBLECOUNTDESCR\fP"
Counting the descriptor length failed. (\fIlCreateElem\fP, \fIlUndumpElem\fP)
.IP "\fBLEMALLOC\fP"
.M Malloc 3
failed. (\fIlCreateElem\fP)
.IP "\fBLEELEMNULL\fP"
List element is NULL. (\fIlFreeElem\fP, \fIlCopyElem\fP, \fIlAppendElem\fP, \fIlInsertElem\fP,
\fIlDechainElem\fP, \fIlFindNext\fP, \fIlWriteElem\fP, \fIlGetPosViaElem\fP, \fIlDumpElem\fP)
.IP "\fBLELISTNULL\fP"
List is NULL. (\fIlAppendElem\fP, \fIlInsertElem\fP, \fIlDechainElem\fP, \fIlFindFirst\fP)
.IP "\fBLECREATEELEM\fP"
Creation of a list element failed. (\fIlCopyElem\fP, \fIlUndumpElem\fP)
.IP "\fBLEFILENULL\fP"
File pointer is NULL. (\fIlDumpElem\fP, \fIlUndumpElem\fP)
.IP "\fBLEDESCRNULL\fP"
List descriptor pointer is NULL. (\fIlUndumpElem\fP)
.IP "\fBLECOPYSWITCH\fP"
Copying a list element field failed. (\fIlCopyElem\fP)
.IP "\fBLESYNTAX\fP"
A syntax error occurred (missing opening or closing brackets).
(\fIlUndumpElem\fP)
.\"
.\"
.SH "SEE ALSO"
.M xxqs_name_sxx_intro 1 ,
.M list_intro 3 .
.\"
.\"
.SH COPYRIGHT
See
.M xxqs_name_sxx_intro 1
for a full statement of rights and permissions.
