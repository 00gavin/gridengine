*** vnc_sun4_sosV_5.5/vncserver	Thu Oct 26 17:16:37 2000
--- vnc_sun4_SunTCP/vncserver	Thu Jul 11 11:20:37 2002
***************
*** 32,41 ****
  # Global variables.  You may want to configure some of these for your site.
  #
  
! $geometry = "1024x768";
  $depth = 8;
  $desktopName = "X";
! $vncClasses = "/usr/local/vnc/classes";
  $vncUserDir = "$ENV{HOME}/.vnc";
  $xauthorityFile = "$ENV{HOME}/.Xauthority";
  
--- 32,41 ----
  # Global variables.  You may want to configure some of these for your site.
  #
  
! $geometry = "1024x800";
  $depth = 8;
  $desktopName = "X";
! $vncClasses = "$ENV{VNC_ROOT}/classes";
  $vncUserDir = "$ENV{HOME}/.vnc";
  $xauthorityFile = "$ENV{HOME}/.Xauthority";
  
***************
*** 43,50 ****
      = ("#!/bin/sh\n\n".
         "xrdb \$HOME/.Xresources\n".
         "xsetroot -solid grey\n".
!        "xterm -geometry 80x24+10+10 -ls -title \"\$VNCDESKTOP Desktop\" &\n".
!        "twm &\n");
  
  chop($host = `uname -n`);
  
--- 43,49 ----
      = ("#!/bin/sh\n\n".
         "xrdb \$HOME/.Xresources\n".
         "xsetroot -solid grey\n".
!        "/usr/dt/bin/Xsession &\n");
  
  chop($host = `uname -n`);
  
***************
*** 90,103 ****
      
  # Make sure the user has a password.
  
! ($z,$z,$mode) = stat("$vncUserDir/passwd");
! if (!(-e "$vncUserDir/passwd") || ($mode & 077)) {
!     warn "\nYou will require a password to access your desktops.\n\n";
!     system("vncpasswd $vncUserDir/passwd"); 
!     if (($? >> 8) != 0) {
! 	exit 1;
!     }
! }
  
  # Find display number.
  
--- 89,102 ----
      
  # Make sure the user has a password.
  
! # ($z,$z,$mode) = stat("$vncUserDir/passwd");
! # if (!(-e "$vncUserDir/passwd") || ($mode & 077)) {
! #     warn "\nYou will require a password to access your desktops.\n\n";
! #     system("vncpasswd $vncUserDir/passwd"); 
! #     if (($? >> 8) != 0) {
! # 	exit 1;
! #     }
! # }
  
  # Find display number.
  
***************
*** 122,128 ****
  # PID and part of the encrypted form of the password.  Ideally we'd use
  # /dev/urandom, but that's only available on Linux.
  
! srand(time+$$+unpack("L",`cat $vncUserDir/passwd`));
  $cookie = "";
  for (1..16) {
      $cookie .= sprintf("%02x", int(rand(256)));
--- 121,127 ----
  # PID and part of the encrypted form of the password.  Ideally we'd use
  # /dev/urandom, but that's only available on Linux.
  
! srand(time+$$);
  $cookie = "";
  for (1..16) {
      $cookie .= sprintf("%02x", int(rand(256)));
***************
*** 141,148 ****
  $cmd .= " -depth $depth" if ($depth);
  $cmd .= " -pixelformat $pixelformat" if ($pixelformat);
  $cmd .= " -rfbwait 120000";
! $cmd .= " -rfbauth $vncUserDir/passwd";
  $cmd .= " -rfbport $vncPort";
  
  # Add font path and color database stuff here, e.g.:
  #
--- 140,151 ----
  $cmd .= " -depth $depth" if ($depth);
  $cmd .= " -pixelformat $pixelformat" if ($pixelformat);
  $cmd .= " -rfbwait 120000";
! # $cmd .= " -rfbauth $vncUserDir/passwd";
  $cmd .= " -rfbport $vncPort";
+ # Disallow shared connections; refuse any such attempts; disable access control
+ $cmd .= " -nevershared -dontdisconnect -ac";
+ # Don't listen on UNIX domain socket
+ $cmd .= " -nolisten local";
  
  # Add font path and color database stuff here, e.g.:
  #
***************
*** 149,154 ****
--- 152,160 ----
  # $cmd .= " -fp /usr/lib/X11/fonts/misc/,/usr/lib/X11/fonts/75dpi/";
  # $cmd .= " -co /usr/lib/X11/rgb";
  #
+ # Specify standard Solaris paths
+ $cmd .= " -fp /usr/openwin/lib/X11/fonts/F3bitmaps/,/usr/openwin/lib/X11/fonts/Type1/,/usr/openwin/lib/X11/fonts/Speedo/,/usr/openwin/lib/X11/fonts/misc/,/usr/openwin/lib/X11/fonts/75dpi/,/usr/openwin/lib/X11/fonts/100dpi/";
+ $cmd .= " -co /usr/openwin/lib/X11/rgb";
  
  foreach $arg (@ARGV) {
      $cmd .= " " . &quotedString($arg);
***************
*** 521,526 ****
--- 527,540 ----
  	die "$prog: The HOME environment variable is not set.\n";
      }
  
+     #
+     # Check the VNC_ROOT environment variable is set
+     #
+ 
+     if (!defined($ENV{VNC_ROOT})) {
+ 	die "$prog: The VNC_ROOT environment variable is not set.\n";
+     }
+ 
      #
      # Find socket constants. 'use Socket' is a perl5-ism, so we wrap it in an
      # eval, and if it fails we try 'require "sys/socket.ph"'.  If this fails,
