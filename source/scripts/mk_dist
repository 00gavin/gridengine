#!/bin/sh
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://www.gridengine.sunsource.net/license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

#set -x

PATH=/opt/schily/bin:$PATH

umask  022

PREFIX=cod

FTPROOT=/usr2/ftproot/gridwareftp/pub


TOCFILE=/dev/null
LICFILE=/dev/null

CHANGE=""
BASEDIR=/tmp/codine4dist
CDCONTAINER=/dist/C4/cdcontainer


TAPEDEV=/dev/rmt/0m

APICONTENT="api/README api/doc api/examples api/include"

COMPRESSOPT=""

MKISOFS=mkisofs
ISOFSOPTIONS="-l -J -L -N -r -v"

# SUNPKG BEGIN ---------------------------------

PKGFILE_DOC="<product>-<version>-doc<language>"
PKGFILE_BIN="<product>-<version>-bin-<arch>"
PKGFILE_COMMON="<product>-<version>-common"
PKG_DOC="<product_short>doc<language>"
PKG_BIN="<product_short><arch_short>"
PKG_COMMON="<product_short>comm"
PKG_BASEDIR=/gridware/codine
SDRMOWNER=codadmin
SDRMGROUP=adm

# SUNPKG END -----------------------------------

ZIP="zip -r"

trap 'echo; echo INTR: deleting LOCKED and /tmp files; rm -f /dist/C4/LOCKED $TMPFILE 2>/dev/null; exit 1' 1 2 3 15


#---------------------------------------------------------------------------
#
exit_handler()
{
   rm -f /dist/C4/LOCKED
   rm -f $TMPFILE
   exit $1
}

#---------------------------------------------------------------------------
#
ErrUsage()
{
   $ECHO "Usage: $0 [-cdrom|-ftp|-sunpkg] [-f <tape_dev>] [-nopvm] [-plusapi]" 
   $ECHO "       $0 [-cdrom|-ftp|-sunpkg] [-qmaster] [-basedir dir]"
   $ECHO "       $0 [-cdrom|-ftp|-sunpkg] [-bin] [-basedir dir]"
   $ECHO "       $0 [-cdrom|-ftp|-sunpkg] [-common] [-basedir dir]"
   $ECHO ""
   $ECHO "      -cdrom creates distribution in \"cdcontainer\""
   $ECHO "             this option overrides \"-f\" and \"-basedir\""
   $ECHO "      -sunpkg creates packages for SUN pkgadd"
   $ECHO ""
   $ECHO '       Options "-qmaster" "-bin" "-common" "-api" create a'
   $ECHO "       compressed tar file (default in: $BASEDIR)"
   $ECHO ""
   $ECHO "       -h-|-help show this usage"
   $ECHO "       -bin        create tar.gz files from all binaries in bin/,"
   $ECHO "                   utilbin/ and examples/jobsbin for FTP server"
   $ECHO "       -common     create tar.gz file with rest of distribution for FTP"
   $ECHO "                   server"
   $ECHO "       -basedir    set base directory for options which create files"
   $ECHO "                   default: $BASEDIR" 
   $ECHO ""
   exit_handler 1
}

#---------------------------------------------------------------------------
#
Execute()
{
   if [ "$verbose" = true ]; then
      $ECHO $* 
   fi
   $*
   if [ $? != 0 ]; then
      $ECHO 
      $ECHO "Command failed: $*"
      $ECHO ""
      exit_handler 1  
   fi
}

#---------------------------------------------------------------------------
#
InitLicenseAndTocFile()
{
   file=$1
   touch $1

   WHO=`logname`
   DATE=`date`
   
   $ECHO "SGE base:      $C_DIR"                        >> $file

   if [ $cmdname != mk_pass ]; then
      $ECHO "Version:       $VERSION"                   >> $file
   fi

   $ECHO "Customer:      $CUSTOMER"                     >> $file

   if [ $cmdname != mk_pass ]; then
      $ECHO "Architectures: $SELECTED_ARCHS"            >> $file
   fi

   $ECHO "Created by:    $WHO"                          >> $file
   $ECHO "Created at:    $DATE"                         >> $file
   $ECHO "Host:          `hostname`"                    >> $file

   if [ $cmdname != mk_pass ]; then
      $ECHO "Target:        $target"                    >> $file
      $ECHO "Content:       $CONTENT"                   >> $file
   fi

   $ECHO ""			                        >> $file
}

#---------------------------------------------------------------------------
# --> here the base name of the package is defined
#
sun_product_short()
{
   case $1 in 
      codine|CODINE)
         echo SDRM
         ;;
      grd|GRD)
         echo SGRM
         ;; 
   esac
}

#---------------------------------------------------------------------------
# --> define mapping from CODINE arch to package arch
#
sun_arch_short()
{
   case $1 in 
      'solaris')
         echo sp32
      ;;
      'solaris64')
         echo sp64
      ;;
      *)
         echo $1
      ;;
   esac
}

#---------------------------------------------------------------------------
# --> define mapping from CODINE arch to download file arch
#
sun_arch_long()
{
   case $1 in 
      'solaris')
         echo solsparc32
      ;;
      'solaris64')
         echo solsparc64
      ;;
      *)
         echo $1
      ;;
   esac
}

#---------------------------------------------------------------------------
# --> echo sun package name to stdout 
# $1 e.g. "bin", "doc" or "common"
# $2 "codine" or "grd"
# $3 CODINE arch name, e.g. "solaris", "solaris64"
# $4 language, like "de"
#
sun_package_name()
{
   package=$1
   product_short=`sun_product_short $2`
   arch_short=`sun_arch_short $3`
   language="$4"

   case $package in
      'doc')
         name=$PKG_DOC
      ;;
      'bin')
         name=$PKG_BIN
      ;;
      'common')
         name=$PKG_COMMON
      ;;
   esac

   echo $name | sed -es/\<product_short\>/$product_short/g  \
                    -es/\<arch_short\>/$arch_short/g \
                    -es/\<language\>/"$language"/g
}

#---------------------------------------------------------------------------
# --> echo download file name to stdout, lower case of product name
#
sun_package_filename()
{
   package=$1
   product=`echo $2 | tr "[A-Z]" "[a-z]"`
   version=`echo $3 | tr "." "_"`
   arch_long=`sun_arch_long $4`
   language=$5

   case $package in
      'doc')
         name=$PKGFILE_DOC
         ;;
      'bin')
         name=$PKGFILE_BIN
         ;;
      'common')
         name=$PKGFILE_COMMON
         ;;
   esac

   echo $name | sed -es/\<product\>/$product/g \
                    -es/\<arch\>/$arch_long/g  \
                    -es/\<version\>/$version/g \
                    -es/\<language\>/$language/g
}


#---------------------------------------------------------------------------
# --> add top level direcotries to prototype file
#
sun_protoype_dir_add()
{
   package=$1  
   case $package in
      'bin')
         dirs="bin examples examples/jobsbin utilbin"
      ;;
      'common')
         dirs="doc examples pvm"
      ;;
      'doc')
         dirs="doc"
      ;;
   esac

   for i in $dirs; do
      echo d none $i 0755 \$SDRMOWNER \$SDRMGROUP >> prototype
   done 
}

#---------------------------------------------------------------------------
# --> create the prototype file
#     top level direcotires of "content" will be added manually
#
sun_create_prototype_file()
{
  package=$1
  content="$2"

   # pkgproto create file permisson/owner file
   pkgproto $content | parse_sun_proto $package > prototype
   
   for i in pkginfo copyright request; do
      echo i $i=$i >> prototype
   done   

   # the following directories are not included automatically by pkgproto
   # causes trouble, so add them by hand
   sun_protoype_dir_add $package
}

#---------------------------------------------------------------------------
#
#  NAME
#     create_sun_package -- create package for pkgadd
#
#  SYNOPSIS
#     create_sun_package <basedir> <package> <product> <version> <language> <arch> <content>
#
#  FUNCTION
#     Creates a package for use with sun pkgadd.
#     The package will be packed in a zip archive.
#
#  INPUTS
#     basedir - directory where the package and the zip archive will be stored
#     package - which package to build (doc, bin or common)
#     product - which product to package (codine)
#     version - version number 
#     language - language of locales included in (common) package
#     arch - architecture of binaries in (bin) package
#     content - list of files and directories
#
#  RESULT
#     Directory with package and zip archive in <basedir>
#
#  EXAMPLE
#     create_sun_package /tmp/codine4dist bin codine 5.2 en solaris "bin utilbin"
#
#
create_sun_package()
{
   $ECHO "Creating SUN package"
   if [ $# -ne 7 ]; then
      $ECHO create_sun_package called with wrong no of arguments - see documentation
      exit_handler 1 
   fi   

   basedir=$1         # where to create the package, e.g. /tmp/codine4dist
   package=$2         # "bin" "common" "doc"
   product=$3         # CODINE or GRD
   version=$4         # e.g. 5.2
   language="$5"      # "" or "de" or "fr"
   arch=$6            # CODINE arch, like "solaris" or "solaris64
   content=$7         # "tar" content

   package_name=`sun_package_name $package $product $arch "$language"`
   package_file_name=`sun_package_filename $package $product $version $arch "$language"`

   rm -rf ${basedir}/$package_name ${basedir}/$package_file_name

   for i in prototype pkginfo copyright request; do
      rm -f $i
   done   

   cp ../sunpkg/copyright copyright
   cp ../sunpkg/request request

   sun_create_prototype_file $package "$content"

   sed -e "s/<PACKAGE>/$package_name/" \
       -e "s/<VERSION>/$version/" \
       -e "s/<PRODUCT>/$product/" \
       -e "s#<BASEDIR>#$PKG_BASEDIR#" \
       -e "s/<SDRMOWNER>/$SDRMOWNER/" \
       -e "s/<SDRMGROUP>/$SDRMGROUP/" ../sunpkg/pkginfo  > pkginfo

   pkgmk -d $basedir -r . -f prototype 

   (cd $basedir && $ZIP ${package_file_name} $package_name)
}

#---------------------------------------------------------------------------
#
#  NAME
#     parse_sun_proto -- parse and change SUN prototype file  
#
#  SYNOPSIS
#     parse_sun_proto
#
#  FUNCTION
#     Reads a SUN prototype file from stdin and writes it back to stdout.
#     owner and group of the files will be changed to be Variables
#     SDRMOWNER and SDRMGROUP
#
# --> set special file owner and permssions here!!!
#
parse_sun_proto()
{
   while read ftype class pathname mode owner group; do
      if [ $ftype != s ]; then
         program=`basename $pathname`
         if [ \( $program = "rsh" -o $program = "rlogin" -o $program = "testsuidroot" \) -a $1 = bin ]; then
            echo $ftype $class $pathname $mode root root
         else   
            echo $ftype $class $pathname $mode \$SDRMOWNER \$SDRMGROUP 
         fi
      else
         echo $ftype $class $pathname 777 \$SDRMOWNER \$SDRMGROUP
      fi  
   done
}


#------------------------------------------------------------------------
#-------------------------------------------------------------------------
# MAIN section
#

if [ -f LOCKED ]; then
   echo "Lock file \"LOCKED\" exists:"
   cat LOCKED
   echo
   echo "You may delete this file if you are sure that nobody else"
   echo "is creating a password or distribution." 
   exit 1
fi

echo > LOCKED
echo "Locked by \`$USER' on host \``hostname`'" >> LOCKED
echo >> LOCKED

#-------------------------------------------------------------------------
# Check how we are called 
# 
cmdname=`basename $0`

makecorba=false
makepvm=false

if [ $cmdname = c52 -o $cmdname = g52 ]; then
   VERSION=5.2
   AVAILABLE_ARCHS1="aix42 aix43 alinux glinux hp10 hp11"
   AVAILABLE_ARCHS2="irix6 osf4 tru64 solaris solaris64"
   makepvm=true
   if [ $cmdname = c52 ]; then
      C_DIR=C52
      PRODUCT=CODINE
      APRODUCT=CODINE
      FTPVERSIONDIR=codine52
      INSTALL_SCRIPT=inst_codine
   else
      C_DIR=G52
      PRODUCT=GRD
      APRODUCT=CODINE
      FTPVERSIONDIR=grd52
      INSTALL_SCRIPT=inst_grd
   fi

   PVMCONTENT="pvm/README pvm/*.sh pvm/*.template pvm/src"
   COMMON_DOCS="doc/INSTALL doc/UPGRADE doc/*.asc"
   DOC_PACKAGE="doc/Codine52* doc/READMEFIRST"
   COMMON_PACKAGE="README 3rd_party catman ckpt $COMMON_DOCS examples/jobs $INSTALL_SCRIPT install_qmaster install_execd man $PVMCONTENT mpi qmon qsi util"
elif [ $cmdname = mk_pass ]; then
   C_DIR=UNKNOWN
   PRODUCT=UNKNOWN
   VERSION=PASSWORD_CREATION
   CONTENT="UNKNOWN"
   APICONTENT="UNKNOWN"
   target="UNKNOWN"
else
   ErrUsage
fi

if [ $ARCH = linux -o $ARCH = glinux -o $ARCH = alinux ]; then
   TAR=tar
   TR=tr
   ECHO="/bin/echo -e"
   MAILER=/bin/mail
elif [ $ARCH = hp -o $ARCH = hp10 ]; then
   TAR=tar
   TR=tr
   ECHO=/bin/echo 
   MAILER=/usr/bin/mailx  
elif [ $ARCH = osf4 ]; then
   TAR=gtar
   TR=tr
   ECHO=/bin/echo
   MAILER=/usr/bin/Mail
elif [ $ARCH = solaris -o $ARCH = solaris64 ]; then
   TAR=gtar
   TR=tr
   ECHO=echo
   MAILER=/bin/mail
else
   TAR=tar
   TR=tr
   ECHO=echo
   MAILER=/bin/mail
fi

makeqmaster=false
makebin=false
makecommon=false
makeapi=false
makerenewpw=false
ftpserver=false
plusapi=false
target=file
sunpkg=false

ARGC=$#
while [ $ARGC -gt 1 ]; do
   case $1 in
   -cdrom)
      target=cdrom
      BASEDIR=$CDCONTAINER
      shift
      ARGC=`expr $ARGC - 1`
      ;;
   -sunpkg)
      sunpkg=true
      shift
      ARGC=`expr $ARGC - 1`
      ;;
   -h|-help)
      ErrUsage
      ;;
   -basedir)
      shift
      ARGC=`expr $ARGC - 1`
      if [ $ARGC -lt 1 ]; then
         $ECHO ""
         $ECHO "Error: Missing argument to -basedir switch!"
         $ECHO ""
         ErrUsage
      fi
      BASEDIR=$1
      shift
      ARGC=`expr $ARGC - 1`
      ;;
   -f)
      shift
      ARGC=`expr $ARGC - 1`
      if [ $ARGC -lt 1 ]; then
         $ECHO ""
         $ECHO "Error: Missing argument to -f switch!"
         $ECHO ""
         ErrUsage
      fi
      TAPEDEV=$1
      shift
      ARGC=`expr $ARGC - 1`
      ;;
   -ftp)
      shift
      ftpserver=true
      ARGC=`expr $ARGC - 1`
      COMPRESSOPT=z
      ;;
   -bin)
      $ECHO "Creating tar file(s) from all binaries in bin/ utilbin/ examples/jobsbin"
      makebin=true
      shift
      ARGC=`expr $ARGC - 1`
      ;;
   -common)
      $ECHO "Creating tar file with common files of distribution for FTP server"
      makecommon=true
      shift 
      ARGC=`expr $ARGC - 1`
      ;;
   -*)
      $ECHO ""
      $ECHO "Error: Unknown option: $1"
      ErrUsage $0
      ;;
   *)
      ARGC=1
   esac
done

if [ $ARGC != 1 ]; then
   ErrUsage $0
fi

#--- END-OF-COMMANDLINE-PARSING------------------------------------------

if [ $target = cdrom -a $ftpserver = true ]; then
   ErrUsage $0
fi

if [ $ftpserver = true ]; then
   TAPEDEV=$BASEDIR/${PRODUCT}_$SERIAL.tar.gz
fi

COMMON_PACKAGE="LICENSE_$SERIAL VERSION_$VERSION $COMMON_PACKAGE"
ADIR=""
QMACONTENT=""

for i in $SELECTED_ARCHS; do
   if [ $makepvm = true ]; then
       PVMTARGETS="pvm/bin/$i pvm/lib/$i api/lib/$i"
   else
       PVMTARGETS=""
   fi

   if [ $plusapi = true -a $makepvm = false ]; then
      ALIB="$ALIB api/lib/$i"  
   else
      ALIB=""
   fi

   ADIR="$ADIR bin/$i utilbin/$i examples/jobsbin/$i $PVMTARGETS $ALIB"
   if [ $makecorba = true ]; then
      QMACONTENT="$QMACONTENT bin/$i/${PREFIX}_qcmaster bin/$i/${PREFIX}_qmaster"
   else
      QMACONTENT="$QMACONTENT bin/$i/${PREFIX}_qmaster"
   fi
done

SINGLE_FILE_CONTENT="$COMMON_PACKAGE $DOC_PACKAGE $ADIR"

if [ $target = cdrom ]; then
   Execute rm -f $CDCONTAINER/*.tar
   Execute rm -f $CDCONTAINER/*.tar.gz 
fi

if [ $makebin = true -o $makecommon = true ]; then
   Execute mkdir -p $BASEDIR

   if [ $makebin = true ]; then
      cd $C_DIR
      ret=0

      if [ $ftpserver = true ]; then
         copyit=true
         $ECHO "Copy \"bin\" file(s) to FTP server: (y/n) [Y]?: \c"
         read ANS
         if [ "$ANS" = n -o "$ANS" = N ]; then
            copyit=false
         fi
      else
        copyit=false
      fi

      for i in $SELECTED_ARCHS; do
         if [ $ret = 0 ]; then
            ADIR="bin/$i utilbin/$i examples/jobsbin/$i"
            if [ $sunpkg = true ]; then
               filename=$BASEDIR/`sun_package_filename bin ${PRODUCT} ${VERSION} $i`
               $ECHO Command: create_sun_package ${BASEDIR} bin ${PRODUCT} ${VERSION} "" $i "$ADIR"
                              create_sun_package ${BASEDIR} bin ${PRODUCT} ${VERSION} "" $i "$ADIR"
            fi
            
            $ECHO Command: $TAR cvzf ${filename}.tar.gz $ADIR
                           $TAR cvzf ${filename}.tar.gz $ADIR

            ret=$?
            if [ $ret = 0 -a $copyit = true ]; then
               echo Copying $filename "-->" gimli:${FTPROOT}/${FTPVERSIONDIR}
               rcp $filename gimli:${FTPROOT}/${FTPVERSIONDIR}
               if [ $ORGSERIAL = 10000 -a \( $i = solaris -o $i = solaris64 \) ]; then
                  echo Copying $filename "-->" gimli:${FTPROOT}/cod-solaris
                  rcp $filename gimli:${FTPROOT}/cod-solaris
               fi
            fi
         fi
      done
      cd ..
   fi
  
   if [ $makecommon = true ]; then
      if [ $ftpserver = true ]; then
         copyit=true
         $ECHO "Copy \"common\" and \"doc\" files to FTP server: (y/n) [Y]?: \c"
         read ANS
         if [ "$ANS" = n -o "$ANS" = N ]; then
            copyit=true
         fi
      else
         copyit=false
      fi

      cd $C_DIR

      if [ $sunpkg = true ]; then
         filename=$BASEDIR/`sun_package_filename common ${PRODUCT} ${VERSION} $i`
         $ECHO Command: create_sun_package ${BASEDIR} common ${PRODUCT} ${VERSION} "" $i "$COMMON_PACKAGE"
                        create_sun_package ${BASEDIR} common ${PRODUCT} ${VERSION} "" $i "$COMMON_PACKAGE"
         commonfilename=$filename

         filename=$BASEDIR/`sun_package_filename doc ${PRODUCT} ${VERSION} $i`
         $ECHO Command: create_sun_package ${BASEDIR} doc ${PRODUCT} ${VERSION} "" $i "$DOC_PACKAGE"
                        create_sun_package ${BASEDIR} doc ${PRODUCT} ${VERSION} "" $i "$DOC_PACKAGE"
         docfilename=$filename
      fi

      $ECHO Command: $TAR cvzf ${commonfilename}.tar.gz $COMMON_PACKAGE
                     $TAR cvzf ${commonfilename}.tar.gz $COMMON_PACKAGE

      $ECHO Command: $TAR cvzf ${docfilename}.tar.gz $DOC_PACKAGE
                     $TAR cvzf ${docfilename}.tar.gz $DOC_PACKAGE

                        
      ret=$?
      if [ $ret = 0 -a $copyit = true ]; then
         echo Copying $filename "-->" gimli:${FTPROOT}/${FTPVERSIONDIR}
         rcp $filename gimli:${FTPROOT}/${FTPVERSIONDIR}
         if [ "${PRODUCT}" = codine ]; then
            echo Copying $filename "-->" gimli:${FTPROOT}/cod-solaris
            rcp $filename gimli:${FTPROOT}/cod-solaris
         fi
      fi
   cd ..
   fi
else
   cd $C_DIR
   if [ $target = file ]; then
      $TAR cvf$COMPRESSOPT $TAPEDEV $SINGLE_FILE_CONTENT 2>&1 | tee -a ../$TOCFILE
   else
      $TAR cvf $BASEDIR/${PRODUCT}_${VERSION}.tar $SINGLE_FILE_CONTENT 2>&1 | tee -a ../$TOCFILE
   fi
   ret=$?
   cd ..
fi

if [ "$ret" != "0" ]; then
   $ECHO "tar command exited with status: $ret"
fi

if [ $target = cdrom ]; then
   $ECHO "creating CDROM-IMAGE"
   $ECHO "creating CDROM-IMAGE" >> $TOCFILE
   $ECHO "creating CDROM-IMAGE" >> $LICFILE

   if [ `hostname` = LIS.genias.de ]; then
      IMAGEBASE=/scratch/cdbren
   else
      IMAGEBASE=./
   fi
   echo $MKISOFS $ISOFSOPTIONS -A "$APRODUCT $VERSION - serial $ORGSERIAL" \
           -o $IMAGEBASE/cdimage.$SERIAL $CDCONTAINER 2>&1 | tee -a $TOCFILE
   /bin/nice -19 $MKISOFS $ISOFSOPTIONS -A "$APRODUCT $VERSION - serial $ORGSERIAL" \
           -o $IMAGEBASE/cdimage.$SERIAL $CDCONTAINER 2>&1 | tee -a $TOCFILE
fi

exit_handler 0
